name: ci

on:
  push:

permissions:
  contents: read
  id-token: write         

jobs:
  opa:
    runs-on: ubuntu-latest
    env:
      GO111MODULE: "on"

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-go@v5
        with: { go-version: "1.22" }

      - name: Test and build full coverage JSON
        shell: bash
        run: |
            set -euxo pipefail

            echo "Go version:"
            go version || { echo "Go not found"; exit 1; }

            if ! go test -coverprofile=coverage.out ./... | tee test.log; then
                echo "INFO:Test suite failed, but proceeding to gather coverage..."
            fi


            if [ ! -f coverage.out ]; then
            echo "coverage.out not found"
            exit 1
            fi

            go tool cover -func=coverage.out || { echo "cover tool failed"; exit 1; }

            TOTAL=$(go tool cover -func=coverage.out | awk '/total:/ {print $3}')
            echo "✔ Total coverage: $TOTAL"

            TEMP_PKGS=$(mktemp)

            echo "Running per-package test coverage..."
            if ! go test -cover ./... | tee pkgs.log; then
            echo "INFO: per-package test failed, continuing anyway"
            fi


            while read -r line; do
            echo "LINE: $line"
            if [[ "$line" == *"coverage:"* ]]; then
                CLEAN=$(echo "$line" | sed -E 's/^ok\s+|^\?\s+|[(]cached[)]|coverage:|of statements.*$//g' | xargs)
                PKG=$(echo "$CLEAN" | awk '{print $1}')
                PERCENT=$(echo "$CLEAN" | awk '{print $2}')
                if [[ -n "$PKG" && -n "$PERCENT" ]]; then
                echo "\"$PKG\": \"$PERCENT\"" >> "$TEMP_PKGS"
                fi
            fi
            done < pkgs.log


            echo "Writing JSON output..."

            {
            echo "{"
            echo "  \"total_test_coverage\": \"$TOTAL\","
            echo "  \"packages\": {"
            tail -n +1 "$TEMP_PKGS" | paste -sd "," -
            echo "  }"
            echo "}"
            } > coverage.json

            echo "✔ JSON written:"
            cat coverage.json

        
    

      - uses: open-policy-agent/setup-opa@v2
        with: { version: "latest" }

      - name: Compose input.json
        run: |
          jq -n \
            --argjson cov "$(cat coverage.json)" \
            --arg repo "$repo" \
            --arg head "$head" \
            --arg token "$token" \
            '{coverage:$cov, repo:$repo, head:$head, token:$token}' \
            > input.json


      - name: OPA policy check
        run: |
          opa eval --fail-defined \
            -i input.json -d policies 'data.ci.allow'

      - uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            coverage.json
